# Function to check if a queen placement is safe
def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col or abs(board[i] - col) == abs(i - row):
            return False
    return True

# Backtracking function to solve the N-Queens problem
def solve_n_queens(board, row, n):
    if row == n:
        print_board(board, n)
        return True

    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            if solve_n_queens(board, row + 1, n):
                return True
            board[row] = -1  # Backtrack

    return False

# Function to print the board configuration
def print_board(board, n):
    for row in range(n):
        line = ""
        for col in range(n):
            if board[row] == col:
                line += "Q "
            else:
                line += ". "
        print(line)
    print()

# Initialize board and solve the problem
n = 8
board = [-1] * n
if not solve_n_queens(board, 0, n):
    print("No solution exists.")
