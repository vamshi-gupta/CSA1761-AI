from collections import deque

# Check if a state is valid (missionaries should never be outnumbered)
def is_valid(state):
    m1, c1, m2, c2, _ = state
    return (m1 == 0 or m1 >= c1) and (m2 == 0 or m2 >= c2)

# BFS to solve the problem
def solve_missionaries_cannibals():
    start = (3, 3, 0, 0, 1)  # (missionaries_left, cannibals_left, missionaries_right, cannibals_right, boat_side)
    goal = (0, 0, 3, 3, 0)
    queue = deque([(start, [])])
    visited = set()

    while queue:
        (m1, c1, m2, c2, boat), path = queue.popleft()
        
        if (m1, c1, m2, c2, boat) == goal:
            return path + [(m1, c1, m2, c2, boat)]
        
        if (m1, c1, m2, c2, boat) in visited:
            continue
        visited.add((m1, c1, m2, c2, boat))

        # Possible moves: (missionaries to move, cannibals to move)
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        for m, c in moves:
            if boat == 1:
                new_state = (m1 - m, c1 - c, m2 + m, c2 + c, 0)
            else:
                new_state = (m1 + m, c1 + c, m2 - m, c2 - c, 1)
            
            if all(x >= 0 for x in new_state[:4]) and is_valid(new_state):
                queue.append((new_state, path + [(m1, c1, m2, c2, boat)]))

    return "No solution found."

# Solve and display the solution
solution = solve_missionaries_cannibals()
if solution != "No solution found.":
    print("Solution steps:")
    for step in solution:
        print(f"Left: {step[0]}M {step[1]}C | Right: {step[2]}M {step[3]}C | Boat on {'left' if step[4] == 1 else 'right'}")
else:
    print(solution)
