# Function to display the board
def display_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

# Function to check for a win
def check_win(board, player):
    win_states = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[0][2], board[1][1], board[2][0]]
    ]
    return [player, player, player] in win_states

# Function to check for a draw
def check_draw(board):
    return all(cell != " " for row in board for cell in row)

# Main function to run the game
def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    turn = 0

    while True:
        display_board(board)
        player = players[turn % 2]
        print(f"Player {player}'s turn")
        
        try:
            row, col = map(int, input("Enter row and column (0, 1, or 2): ").split())
            if board[row][col] != " ":
                print("Cell is already taken. Try again.")
                continue
            board[row][col] = player
        except (ValueError, IndexError):
            print("Invalid input. Enter row and column as two numbers between 0 and 2.")
            continue

        if check_win(board, player):
            display_board(board)
            print(f"Player {player} wins!")
            break
        if check_draw(board):
            display_board(board)
            print("It's a draw!")
            break

        turn += 1

# Start the game
play_game()
